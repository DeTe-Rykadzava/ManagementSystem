@page "/auth/sign_in"
@using Database.UseCases
@using ManagementSystem.Auth
@using ManagementSystem.Models
@using Microsoft.AspNetCore.Components.Authorization
@layout Layout.EmptyLayout
@rendermode InteractiveServer

<PageTitle>SignIn</PageTitle>

<div class="container  p-4 rounded-3 bg_salate shadow-lg d-grid">
        <p class="color_darker text-center fs-2 fw-bold p-2 m-0" >Sign In</p>
    <p role="status" class="text-danger m-2">@_message</p>
    <EditForm Model="Input" FormName="SignInForm" OnValidSubmit="LoginAsync" class="d-flex flex-column align-items-stretch gap-4">
        <DataAnnotationsValidator/>
        <div class="gap-2 d-grid">
            <p class="p-0 m-0 form-label color_darker form-label fs-6">Login</p>
            <InputText type="email" @bind-Value="Input.Login" placeholder="your login..." class="form-control"/>
            <ValidationMessage For="() => Input.Login" class="text-danger"/>
        </div>
        <div class="gap-2 d-grid">
            <p class="p-0 m-0 form-label color_darker form-label fs-6">Password</p>
            <InputText type="password" @bind-Value="Input.Password" placeholder="your password..." class="form-control"/>
            <ValidationMessage For="() => Input.Password" class="text-danger"/>
        </div>

        <button class="btn btn-outline-primary text-end px-4 align-content-end align-self-end" type="submit">Sign In</button>
    </EditForm>
    <p class="m-0 px-3 d-flex justify-content-center align-self-center align-items-center">
        No have account? <NavLink class="color_darker_op text-center fs-5 fw-bold p-2 text-decoration-underline" href="/auth/sign_up">Registration</NavLink>
    </p>
</div>

@code {

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    private AuthProvider AuthProvider { get; set; } = default!;

    [Inject] private ILogger<SignIn> Logger { get; set; } = default!;

    private SignInModel Input { get; set; } = new();

    private string _message = "";
    
    private async void LoginAsync()
    {  
        try
        {
            _message = "";
            StateHasChanged();
            var result = await AuthProvider.LoginAsync(Input);
            if (result.IsSuccess)
            {
                _message = result.Message; 
                NavigationManager.NavigateTo($"api/auth/sign_in/{result.Token}&");
            }
            else
            {
                if (result.Message == "Unauthorized")
                {
                    _message = "[KVAK] User is not found =(";
                    StateHasChanged();
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            Logger.LogError("Error with login user.\n{Message}\n{InnerException}", e.Message, e.InnerException);
        }
    }

}